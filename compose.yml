services:
    python_app:
        build: ./src
        restart: always
        networks:
            - my_network
        depends_on:
            redis:
                condition: service_healthy
            postgresql:
                condition: service_healthy

    redis:
        image: redis:7.4-alpine
        restart: always
        networks:
            - my_network
        volumes:
            - redis_data:/data
        healthcheck:
            test: ["CMD", "redis-cli", "ping"]
            interval: 2s
            retries: 5

    postgresql:
        image: postgres:17.2-alpine
        restart: always
        environment:
            POSTGRES_USER: admin
            POSTGRES_PASSWORD: admin
            POSTGRES_DB: cryptobot
        networks:
            - my_network
        volumes:
            - postgres_data:/var/lib/postgresql/data
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "admin"]
            interval: 2s
            retries: 5

networks:
    my_network:
        driver: bridge

volumes:
    postgres_data:
    redis_data:
